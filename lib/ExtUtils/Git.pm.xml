<?xml version="1.0" encoding="UTF-8"?>
<refentry version="5.0" xmlns="http://docbook.org/ns/docbook"
          xmlns:xlink="http://www.w3.org/1999/xlink"
          xmlns:xi="http://www.w3.org/2001/XInclude"
          xmlns:svg="http://www.w3.org/2000/svg"
          xmlns:m="http://www.w3.org/1998/Math/MathML"
          xmlns:html="http://www.w3.org/1999/xhtml"
          xmlns:db="http://docbook.org/ns/docbook">
  <refmeta>
    <refentrytitle>ExtUtils::Git</refentrytitle>

    <manvolnum>3</manvolnum>
  </refmeta>

  <refnamediv>
    <refname>ExtUtils::Git</refname>

    <refpurpose>ExtUtils::MakeMaker helper module to add git related Makefile
    targets</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <cmdsynopsis>
      <command>perl -MExtUtils::Git Makefile.PL</command>
    </cmdsynopsis>
  </refsynopsisdiv>

  <refsection>
    <title>Description</title>

    <para>ExtUtils::Git is a ExtUtils::MakeMaker helper module that will add
    git related targets to the Makefile generated by a Makefile.PL run. It is
    intended to help during module development by enforcing some sanity checks
    around git related operations as they apply to Perl modules and provide
    other (sometime not git related) Makefile targets to improve
    productivity.</para>

    <para>This module will undertake workflow check such as ensuring that all
    files in a Module MANIFEST file are present in git during checkin. It will
    increment version numbers and tag files during distribution builds and
    provide other utility functions. </para>
  </refsection>

  <refsection>
    <title>Options</title>

    <para>Once the Makefile is built as per the synopsis the following git
    related and utility targets are available:</para>

    <variablelist>
      <varlistentry>
        <term>git_init</term>

        <listitem>
          <para>Creates an empty git repository and creates a .gitignore file
          (using the git_ignore target). No files are added to the git
          repository</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>git_autocopyright</term>

        <listitem>
          <para>Will update copyright information (including updating
          copyright effective year) in all modules if found. If not found a
          copyright notice will be inserted at the top of the file derived
          from the LICENSE field in the Makefile.PL</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>git_autolicense</term>

        <listitem>
          <para>Will update or create an appropriate LICENSE file in the
          module MANIFEST and working directory with text obtained from the
          <classname>Software::License</classname> Perl module</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>git_ci</term>

        <listitem>
          <para>Check all changes into git repository for files found in the
          MANIFEST. Will run a sanity to check that only files in the MANIFEST
          are in the git repository and vica-versa</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>git_push</term>

        <listitem>
          <para>Push all changes into remote repositories.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>git_release</term>

        <listitem>
          <para>Increment module version numbers, tag files and create a new
          distribution file for this module.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>git_status</term>

        <listitem>
          <para>Report status of git managed files vs MANIFEST and status of
          files (clean, changed, conflict)</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>git_version_increment</term>

        <listitem>
          <para>Increment module version numbers</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>cw</term>

        <listitem>
          <para>Run perl -c -w against all files in the module</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>doc</term>

        <listitem>
          <para>Search for any DocBook or Markdown files in the directory
          structure and convert to POD. Files marked in the format
          module.pm.xml or module.pm.md will have their content converted to
          POD and appended to module.pm. Similarly for files in any bin
          directory.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>kwalitee</term>

        <listitem>
          <para>Run Module::CPANTS::Kwalitee tests against a distribution and
          report results</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>perlcritic</term>

        <listitem>
          <para>Run perlcritic across all Perl files in the distribution
          MANIFEST and report results</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>perltidy</term>

        <listitem>
          <para>Run perltidy across all Perl files in the distribution
          MANIFEST</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>perlver</term>

        <listitem>
          <para>Run Perl::MinimumVersion across all Perl file in the
          distribution MANIFEST and report results</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>readme</term>

        <listitem>
          <para>Generate README file</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>subsort</term>

        <listitem>
          <para>Sort all subroutines in all Perl files in the distribution
          MANIFEST into alphabetical order</para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsection>
</refentry>
